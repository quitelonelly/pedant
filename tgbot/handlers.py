# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –º–æ–¥—É–ª–∏
import logging
import datetime
from aiogram import types
from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from kb_bot import kb_start, kb_choice_result
from state.filling import FillingCityState, FillingEmailState, FillingExperienceClientState, FillingExperienceState, FillingMoneyState, FillingNameState, FillingState
from message import send_email
from client  import append_to_google_sheet, get_cities_list, get_email_by_city

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω, –≥–¥–µ –º—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
async def cmd_start(message: types.Message):
    photo_url = 'https://cdn.businessmens.ru/600x-/franchise_file/1177/abe5e2.jpg'
    await message.answer_photo(photo=photo_url, caption='üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞–∫–∞–Ω—Å–∏–∏!\n'
                                                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ\n'
                                                         '–≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å\n'
                                                         '–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª–æ–≤–∏—è.',
                                                         reply_markup=kb_start)

# –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def start_filling(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('<b>üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n–ü—Ä–∏–º–µ—Ä: <b>+7–•–•–•–•–•–•–•–•–•–•</b>', parse_mode='html')
    await state.set_state(FillingState.phone)

# –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
async def name_filling(message: types.Message, state: FSMContext):
    await message.answer('üë§ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è')
    await state.update_data(phone=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(FillingNameState.name)

# –ó–∞–ø—Ä–æ—Å –ø–æ—á—Ç—ã
async def email_fillin(message: types.Message, state: FSMContext):
    await message.answer('üìß –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É')
    await state.update_data(name=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.set_state(FillingEmailState.email)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø–æ—á—Ç—ã

# –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
async def city_filling(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—á—Ç—É
    await message.answer('üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥')
    await state.set_state(FillingCityState.city)

# –í–æ–ø—Ä–æ—Å –æ —Ä–µ–º–æ–Ω—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
async def experience_filling(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(message.text) > 200:  # –õ–∏–º–∏—Ç –Ω–∞ 200 —Å–∏–º–≤–æ–ª–æ–≤
        await message.answer('‚ùå –í–∞—à –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤.')
        return

    await state.update_data(city=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    await message.answer('üõ†Ô∏è –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ —Ä–µ–º–æ–Ω—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤?')
    await state.set_state(FillingExperienceState.experience)

# –í–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
async def experience_client_filling(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(message.text) > 200:  # –õ–∏–º–∏—Ç –Ω–∞ 200 —Å–∏–º–≤–æ–ª–æ–≤
        await message.answer('‚ùå –í–∞—à –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤.')
        return

    await state.update_data(experience=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç
    await message.answer('üì≥ –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞–ø—Ä—è–º—É—é?')
    await state.set_state(FillingExperienceClientState.experience_client)

# –í–æ–ø—Ä–æ—Å –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
async def money_filling(message: types.Message, state: FSMContext):
    await message.answer('üíµ –ù–∞ –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ –í—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ? (–Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)')
    await state.update_data(experience_client=message.text) 
    await state.set_state(FillingMoneyState.money)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def result_filling(message: types.Message, state: FSMContext):
    await state.update_data(money=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    reg_data = await state.get_data()

    name = reg_data.get('name')
    city = reg_data.get('city')
    number = reg_data.get('phone')
    email = reg_data.get('email') 
    choice1 = reg_data.get('experience')
    choice2 = reg_data.get('experience_client')
    money = reg_data.get('money') 

    await message.answer(
        f'<b>–ò—Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º</b>\n\n'
        f'üë§ –ò–º—è: {name}\n'
        f'üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n'
        f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: {number}\n'
        f'üìß –ü–æ—á—Ç–∞: {email}\n' 
        f'üõ†Ô∏è –û–ø—ã—Ç —Ä–µ–º–æ–Ω—Ç–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤: {choice1}\n'
        f'üì≥ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏: {choice2}\n'
        f'üíµ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {money}\n\n'
        f'<b>–í—Å–µ –≤–µ—Ä–Ω–æ?</b>\n\n'
        f'–ï—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞,\n'
        f'–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µüì≥ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ,\n'
        f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –µ—â–µ —Ä–∞–∑.',
        parse_mode='html', reply_markup=kb_choice_result
    )


async def handle_confirmation(callback: types.CallbackQuery, state: FSMContext):
    message = callback.message  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–±—ç–∫–∞
    if callback.data == "result":
        reg_data = await state.get_data()
        name = reg_data.get('name')
        city = reg_data.get('city')
        number = reg_data.get('phone')
        email = reg_data.get('email')  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—á—Ç—É
        choice1 = reg_data.get('experience')
        choice2 = reg_data.get('experience_client')
        money = reg_data.get('money')

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏ –ø–æ—á—Ç
        cities = get_cities_list()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏ –ø–æ—á—Ç

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—á—Ç—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        city_email = get_email_by_city(city, cities)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        email_body = (
            f'üë§ –ò–º—è: {name}\n'
            f'üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n'
            f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: {number}\n'
            f'üìß –ü–æ—á—Ç–∞: {email}\n'  
            f'üõ†Ô∏è –û–ø—ã—Ç —Ä–µ–º–æ–Ω—Ç–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤: {choice1}\n'
            f'üì≥ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏: {choice2}\n'
            f'üíµ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {money}\n'
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
            if city_email:
                subject = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                send_email(city_email, subject, email_body)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—á—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É
                data_to_append = [
                    name,
                    str(datetime.datetime.now()),  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
                    city,
                    email,  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—á—Ç—É
                    number,
                    choice1,
                    choice2,
                    money,
                ]
                append_to_google_sheet(data_to_append)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                await message.answer('‚úÖ –ú—ã –Ω–∞—á–∞–ª–∏ –∏–∑—É—á–∞—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É!\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏\n' +
                                    '–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n' +
                                    '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π—à–µ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º Pedant.ru, –≤–æ—Ç —Å—Å—ã–ª–∫–∞\n' +
                                    'üëâ https://youtu.be/PlAcF_CuWPo?si=_lBWGXwMLDNO3M20\n–î–æ —Å–∫–æ—Ä–æ–≥–æ!')

            else:
                await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥.')

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}')  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É!')

    elif callback.data == "edit":
        await message.answer('–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        await state.set_state(FillingState.phone)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –∑–∞–ø–æ–ª–Ω
                
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def reg_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command(commands=['start']))
    dp.callback_query.register(start_filling, F.data == "start")
    dp.message.register(name_filling, FillingState.phone)
    dp.message.register(email_fillin, FillingNameState.name)  # –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ email_fillin
    dp.message.register(city_filling, FillingEmailState.email)  # –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ city_filling
    dp.message.register(experience_filling, FillingCityState.city)
    dp.message.register(experience_client_filling, FillingExperienceState.experience)
    dp.message.register(money_filling, FillingExperienceClientState.experience_client)
    dp.message.register(result_filling, FillingMoneyState.money)
    dp.callback_query.register(handle_confirmation, F.data.in_({"result", "edit"}))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö